name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  POETRY_VERSION: "<1.4.0"
jobs:
  relock:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install poetry poethepoet
    - name: Lock dependencies
      run: |
        poetry lock
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "chore: update poetry.lock"
  lint:
    needs: [relock]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install poetry poethepoet
        poetry install
    - name: Build and install the library
      run: |
        poe build
    - name: Test with ward
      run: |
        export PYTHONPATH=$(pwd)
        poe test
    - name: Typecheck the code
      run: |
        poetry run poe mypy
    - name: Lint the code
      run: |
        poetry run poe flake8
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true

  test:
    needs: [relock]
    if: |
      ! contains(github.event.head_commit.message, 'docs') && 
      ! contains(github.event.head_commit.message, 'chore') 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 
        ref: ${{ github.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache Poetry cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}
    - name: Cache Packages
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-local-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    - name: Install dependencies
      run: |
        python -m pip install "poetry${{ env.POETRY_VERSION }}" poethepoet
        poetry install --without dev
    - name: Build and install the library
      run: |
        poe build
    - name: Test with ward
      run: |
        poe test
