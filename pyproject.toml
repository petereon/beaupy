[tool.poetry]
name = 'beaupy'
version = '3.9.0'
description = 'A library of elements for interactive TUIs in Python'
authors = ['Peter Vyboch <pvyboch1@gmail.com>']
license = 'MIT'
repository = 'https://github.com/petereon/beaupy'
readme = 'README.md'
keywords = ["cli", "interactive", "console", "terminal", "interface"]
classifiers = [
    'Programming Language :: Python :: 3',
    'License :: OSI Approved :: MIT License',
    'Development Status :: 5 - Production/Stable',
    'Topic :: Terminals',
    'Environment :: Console',
    'Intended Audience :: Developers'
]
packages = [{ include = "beaupy" }]

[tool.poe]
verbosity = -1

[tool.poe.tasks]
add = { shell = 'poetry add' }
install = { shell = 'poetry install' }
build = { shell = 'poetry build' }
clean = { shell = 'rm -R ./dist .pytest_cache .mypy_cache &> /dev/null' }
isort = { shell = 'poetry run isort ./beaupy' }
black = { shell = 'poetry run black ./beaupy --skip-string-normalization' }
mypy = { shell = 'poetry run mypy ./beaupy/' }
flake8 = { shell = 'poetry run pflake8 ./beaupy/' }
perflint = { shell = "poetry run perflint ./beaupy/" }
lint = { shell = 'echo "Running isort..." ; poetry run poe isort; echo "Running black..." ; poetry run poe black ; echo "Running unify..." ; poetry run unify ./beaupy -r -i ; echo "Running flake8..." ; poetry run poe flake8 ; echo "Running mypy..." ; poetry run poe mypy ; echo Done!' }
"lint:watch" = { shell = "poetry run poe lint ; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='poetry run poe lint'" }
"test" = { shell = "poetry run ward" }
"test:watch" = { shell = "poetry run poe test; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='poetry run poe test'" }

[tool.poetry.dependencies]
python = ">=3.7.8,<4.0.0"
rich = ">=12.2.0"
emoji = "^2.0.0"
python-yakh = "0.3.2"
questo = "^0.3.0"

[tool.mypy]
files = ["src"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
show_column_numbers = true
ignore_missing_imports = true

[tool.black]
line-length = 140

[tool.isort]
profile = "black"

[tool.flake8]
max-line-length = 140
max-complexity = 18
select = ["B", "E", "F", "W", "T4", "B9"]

[[tool.pydoc-markdown.loaders]]
type = 'python'
search_path = ['./beaupy']

[tool.pydoc-markdown.renderer]
type = 'markdown'
render_toc = true

[tool.ward]
path = ['test']
hook_module = ["ward_coverage"]

[tool.ward.plugins.coverage]
omit = ["*test*", "example.py", "**/__init__.py"]
report_type = ["term", "xml"]
source = ["."]
branch = true
relative_files = true
report = { skip_empty = true }

[tool.poetry.group.test.dependencies]
expycted = '*'
mock = '*'
poethepoet = '*'
ward = "^0.68.0b0"
ward-coverage = "^0.3.0"

[tool.poetry.group.dev.dependencies]
# Code Scanning and Formatting
mypy = '*'
pyproject-flake8 = "*"
flake8 = "<5"
black = "^22.6.0"
## Bugs
flake8-simplify = '*'
flake8-pie = '*'
flake8-bandit = '*'
## Complexity
flake8-cognitive-complexity = '*'
flake8-expression-complexity = '*'
radon = '*'
xenon = '*'
## Lints
flake8-quotes = '*'
flake8-print = '*'
flake8-eradicate = '*'
flake8-comments = '*'
toml-sort = '*'
isort = '*'
unify = "*"
## Performance
perflint = '*'
# Expect Pattern Testing
expycted = '*'
# Unit Testing
ward = "^0.68.0b0"
mock = '*'
watchdog = '*'
# Coverage
ward-coverage = "^0.3.0"
# Task Runner
poethepoet = '*'
# Docs
pydoc-markdown = "^4.6.3"
types-emoji = "^2.0.1"

[build-system]
requires = ['poetry-core>=1.2.0']
build-backend = 'poetry.core.masonry.api'
